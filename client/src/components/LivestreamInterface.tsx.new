// Create a new file with proper syntax
import { useCallback, useEffect, useState, FormEvent } from "react";
import { useAuth } from "@/hooks/use-auth";
import { useIsMobile } from "@/hooks/use-is-mobile";
import { useToast } from "@/hooks/use-toast";
import { useAgoraTokens } from "@/hooks/use-agora-tokens";
import { User, Settings, LogOut } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import Logo from "@/components/Logo";
import { AgoraVideo } from "@/components/AgoraVideo";
import arenaImage from "@assets/ai.jpg";
import "./LivestreamInterface.css";

interface LivestreamInterfaceProps {
  initialText?: string;
  streamInfo?: {
    appId: string | null;
    token: string | null;
    channelName: string | null;
    uid: number | null;
    streamTitle: string | null;
  };
}

// Types for notes and AI chats
interface Note {
  id: number;
  hostId: number;
  title: string;
  content: string;
  isDeleted: boolean;
  createdAt: string;
  updatedAt: string;
}

interface AiChat {
  id: number;
  hostId: number;
  message: string;
  response: string;
  isDeleted: boolean;
  createdAt: string;
}

// Empty initial arrays - we'll fetch from API
const EMPTY_CHATS: AiChat[] = [];
const EMPTY_NOTES: Note[] = [];

// RTM chat messages will be handled by AgoraVideo component now

export default function LivestreamInterface({
  initialText = "",
  streamInfo,
}: LivestreamInterfaceProps) {
  const [drawerVisible, setDrawerVisible] = useState(false);
  const [activeTab, setActiveTab] = useState<"vynaai" | "notepad">("vynaai");
  const [showNewChat, setShowNewChat] = useState<boolean>(false);
  const [showChatHistory, setShowChatHistory] = useState<boolean>(false);
  const [teleprompterText, setTeleprompterText] = useState(initialText);
  const [viewerCount, setViewerCount] = useState("123.5k");
  const [inputValue, setInputValue] = useState("");
  const [messages, setMessages] = useState<
    Array<{ id: string; content: string; role: "user" | "assistant" }>
  >([]);
  const [isAiLoading, setIsAiLoading] = useState(false);
  const isMobile = useIsMobile();
  const { user, isAuthenticated, logout } = useAuth();

  // Notepad functionality
  const [showNewNote, setShowNewNote] = useState<boolean>(false);
  const [showNoteView, setShowNoteView] = useState<boolean>(false);
  const [currentNote, setCurrentNote] = useState<Note | null>(null);
  const [noteInput, setNoteInput] = useState("");
  const [savedNotes, setSavedNotes] = useState<Note[]>(EMPTY_NOTES);
  const [noteLines, setNoteLines] = useState<string[]>([]);
  
  // AI Chat state
  const [aiChats, setAiChats] = useState<AiChat[]>(EMPTY_CHATS);

  const { toast } = useToast();

  // Use Agora hooks to manage tokens and stream state
  const {
    isLoading: agoraLoading,
    error: agoraError,
    appId,
    token,
    channelName,
    uid,
    role,
    fetchHostToken,
    fetchAudienceToken,
    createLivestream,
  } = useAgoraTokens(streamInfo?.channelName ?? `channel-${Date.now()}`);

  // State specific to this component
  const [isStreamActive, setIsStreamActive] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [userName, setUserName] = useState<string>(isAuthenticated && user ? user.displayName || user.username : "Anonymous");
  const [streamTitle, setStreamTitle] = useState<string>("Vyna.live Stream");
  const [streamId, setStreamId] = useState<string>("");
  const [shareableLink, setShareableLink] = useState<string>("");
  const [showShareLink, setShowShareLink] = useState<boolean>(false);

  // Initialize livestream
  useEffect(() => {
    const initLivestream = async () => {
      try {
        if (
          streamInfo &&
          streamInfo.appId &&
          streamInfo.token &&
          streamInfo.channelName
        ) {
          console.log("Using provided stream info:", streamInfo);

          // Set the stream title if it's provided
          if (streamInfo.streamTitle) {
            setStreamTitle(streamInfo.streamTitle);
          }

          // We already have all the info needed to connect, set stream as active
          setIsStreamActive(true);

          // Set loading to false
          setIsLoading(false);
        } else {
          // No stream info provided, need to create a new session
          console.log("No stream info provided, creating new session");
          await fetchHostToken(channelName);

          // Set loading to false when everything is ready
          // In a production app, this would happen automatically in the hook
          setTimeout(() => {
            setIsLoading(false);
          }, 1000);
        }
      } catch (err) {
        console.error("Error initializing Agora stream:", err);
        showErrorToast("Failed to initialize streaming service");
      }
    };

    initLivestream();

    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [streamInfo]);

  // Handle any errors from Agora
  useEffect(() => {
    if (agoraError) {
      showErrorToast(agoraError.message);
    }
  }, [agoraError]);
  
  // Update username when authentication state changes
  useEffect(() => {
    if (isAuthenticated && user) {
      setUserName(user.displayName || user.username);
    }
  }, [isAuthenticated, user]);

  // Fetch AI chats and notepads when the component mounts or user changes
  useEffect(() => {
    const fetchAiChatsAndNotes = async () => {
      if (!isAuthenticated || !user) return;
      
      try {
        // Fetch AI chats
        const chatResponse = await fetch(`/api/ai-chats/${user.id}`);
        if (chatResponse.ok) {
          const chatData = await chatResponse.json();
          setAiChats(chatData);
        }
        
        // Fetch notepads
        const noteResponse = await fetch(`/api/notepads/${user.id}`);
        if (noteResponse.ok) {
          const noteData = await noteResponse.json();
          setSavedNotes(noteData);
        }
      } catch (error) {
        console.error('Error fetching AI chats and notes:', error);
      }
    };
    
    fetchAiChatsAndNotes();
  }, [isAuthenticated, user]);

  // Handler for going live
  const handleGoLive = useCallback(async () => {
    try {
      // Create a new livestream with the current title and username
      const result = await createLivestream(streamTitle, userName);

      if (result) {
        setIsStreamActive(true);

        // Generate unique stream ID for the stream
        const generatedStreamId = result.id || `stream_${Date.now()}`;
        setStreamId(generatedStreamId);

        // Generate shareable link
        const hostUrl = window.location.origin;
        const link = `${hostUrl}/view-stream/${generatedStreamId}`;
        setShareableLink(link);
        setShowShareLink(true);

        toast({
          title: "You're Live!",
          description: "Your stream is now available to viewers",
        });
      }
    } catch (err) {
      showErrorToast("Failed to go live");
    }
  }, [createLivestream, streamTitle, userName, toast]);

  // Function to show error toast
  const showErrorToast = (message: string) => {
    setError(message);
    toast({
      title: "Stream Error",
      description: message,
      variant: "destructive",
    });
  };

  // Handle opening a new note
  const handleNewNote = useCallback(() => {
    setShowNewNote(true);
    setShowNoteView(false);
    setCurrentNote(null);
  }, []);

  // Handle viewing a note
  const handleViewNote = useCallback((note: Note) => {
    setCurrentNote(note);
    setShowNoteView(true);
    setShowNewNote(false);
  }, []);

  // Handle adding a line to the current note
  const handleAddNoteLine = useCallback(() => {
    if (!noteInput.trim()) {
      return;
    }

    // Add the line to the note lines
    setNoteLines((prev) => [...prev, noteInput.trim()]);

    // Reset input
    setNoteInput("");
  }, [noteInput]);

  // Handle saving the note and going back to notes list
  const handleSaveNote = useCallback(async () => {
    if (noteLines.length === 0) {
      toast({
        title: "Error",
        description: "Note content cannot be empty",
        variant: "destructive",
      });
      return;
    }
    
    if (!isAuthenticated || !user) {
      toast({
        title: "Authentication Error",
        description: "You must be logged in to save notes",
        variant: "destructive",
      });
      return;
    }

    const content = noteLines.join("\n");
    const title = noteLines[0].substring(0, 50) + (noteLines[0].length > 50 ? "..." : "");
    
    try {
      // Send to API
      const response = await fetch('/api/notepads', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          hostId: user.id,
          title,
          content,
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to save note');
      }
      
      const savedNote = await response.json();
      
      // Add the new note to the beginning of saved notes
      setSavedNotes((prev: Note[]) => [savedNote, ...prev]);

      // Reset state
      setNoteLines([]);
      setNoteInput("");
      setShowNewNote(false);

      toast({
        title: "Note saved",
        description: "Your note has been saved",
      });
    } catch (error) {
      console.error('Error saving note:', error);
      toast({
        title: "Error",
        description: "Failed to save your note",
        variant: "destructive",
      });
    }
  }, [noteLines, toast, isAuthenticated, user]);

  // Toggle the side drawer
  const toggleDrawer = useCallback(() => {
    setDrawerVisible((prev) => !prev);
  }, []);

  // Handle sending a message
  const sendMessage = useCallback(async () => {
    if (!inputValue.trim()) return;
    if (!isAuthenticated || !user) {
      toast({
        title: "Authentication Error",
        description: "You must be logged in to use AI chat",
        variant: "destructive",
      });
      return;
    }

    // Create user message
    const userMessageId = Date.now().toString();
    const userMessage = {
      id: userMessageId,
      content: inputValue,
      role: "user" as const,
    };

    // Add user message to the chat
    setMessages((prev) => [...prev, userMessage]);

    // Show the chat history view after sending a message
    setShowChatHistory(true);

    // Clear the input
    setInputValue("");

    // Set loading state
    setIsAiLoading(true);

    try {
      // Call the API to get a response
      const response = await fetch("/api/ai-chat", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          hostId: user.id,
          message: userMessage.content
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to get response");
      }

      const data = await response.json();

      // Add AI response message
      const aiMessage = {
        id: Date.now().toString(),
        content: data.response, // Updated field name to match API response
        role: "assistant" as const,
      };

      setMessages((prev) => [...prev, aiMessage]);
      
      // Add to AI chats history
      setAiChats((prev: AiChat[]) => [data, ...prev]);
      
    } catch (error) {
      console.error("Error getting AI response:", error);

      // Add error message as AI response
      const errorMessage = {
        id: Date.now().toString(),
        content:
          "Sorry, I couldn't process your request at the moment. Please try again later.",
        role: "assistant" as const,
      };

      setMessages((prev) => [...prev, errorMessage]);
    } finally {
      setIsAiLoading(false);
    }
  }, [inputValue, isAuthenticated, user, toast]);

  return (
    <div className="min-h-screen bg-black">
      <h1>Livestream Interface</h1>
      <p>This is a simplified version to fix syntax errors</p>
    </div>
  );
}
