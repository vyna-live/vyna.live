import React, { useState, useEffect } from 'react';
import VynaAIChat from '../../../client/src/components/shared/VynaAIChat';
import Notepad from '../../../client/src/components/shared/Notepad';

// The API base URL for our extension
const API_BASE_URL = process.env.NODE_ENV === 'production' 
  ? 'https://vyna.live'
  : 'http://localhost:5000';

interface User {
  id: number;
  username: string;
  displayName?: string;
  avatarUrl?: string;
}

const PopupApp: React.FC = () => {
  const [activeTab, setActiveTab] = useState<"vynaai" | "notepad">("vynaai");
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [user, setUser] = useState<User | null>(null);

  // Check authentication status when component mounts
  useEffect(() => {
    const checkAuth = async () => {
      try {
        const response = await fetch(`${API_BASE_URL}/api/user`, {
          credentials: 'include'
        });
        
        if (response.ok) {
          const userData = await response.json();
          setUser(userData);
          setIsAuthenticated(true);
        } else {
          setIsAuthenticated(false);
          setUser(null);
        }
      } catch (error) {
        console.error('Authentication check error:', error);
        setIsAuthenticated(false);
        setUser(null);
      } finally {
        setIsLoading(false);
      }
    };
    
    checkAuth();
  }, []);

  // Handle authentication and tab switching
  const handleTabClick = (tab: "vynaai" | "notepad") => {
    setActiveTab(tab);
  };

  if (isLoading) {
    return (
      <div className="flex justify-center items-center h-screen bg-zinc-900">
        <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-[#5D1C34]"></div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="flex flex-col h-screen bg-zinc-900 text-white p-4">
        <div className="text-center mb-6">
          <div className="inline-block">
            <svg width="84" height="28" viewBox="0 0 84 28" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M18.333 3.5L26.25 14L18.333 24.5L10.417 14L18.333 3.5Z" fill="#A67D44" stroke="#A67D44" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M10.417 3.5L18.333 14L10.417 24.5L2.5 14L10.417 3.5Z" fill="#5D1C34" stroke="#5D1C34" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              <path d="M38.77 20.368V8.176H42.626C43.7993 8.176 44.7833 8.38133 45.578 8.792C46.3873 9.18667 47.0033 9.744 47.426 10.464C47.8487 11.168 48.06 11.984 48.06 12.912C48.06 13.84 47.8487 14.664 47.426 15.384C47.0033 16.088 46.3873 16.6453 45.578 17.056C44.7833 17.4667 43.7993 17.672 42.626 17.672H40.618V20.368H38.77ZM40.618 16.04H42.514C43.4513 16.04 44.1553 15.8213 44.626 15.384C45.0967 14.9467 45.332 14.3227 45.332 13.512V12.312C45.332 11.5013 45.0967 10.8773 44.626 10.44C44.1553 10.0027 43.4513 9.784 42.514 9.784H40.618V16.04ZM53.6256 20.536C52.7843 20.536 52.039 20.3547 51.3896 19.992C50.7403 19.6293 50.2323 19.1213 49.8656 18.468C49.499 17.8147 49.3176 17.0587 49.3176 16.2C49.3176 15.3413 49.499 14.5853 49.8656 13.932C50.2323 13.2787 50.7403 12.7707 51.3896 12.408C52.039 12.0453 52.7843 11.864 53.6256 11.864C54.467 11.864 55.2123 12.0453 55.8616 12.408C56.511 12.7707 57.0216 13.2787 57.3936 13.932C57.7656 14.5853 57.9516 15.3413 57.9516 16.2C57.9516 17.0587 57.7656 17.8147 57.3936 18.468C57.0216 19.1213 56.511 19.6293 55.8616 19.992C55.2123 20.3547 54.467 20.536 53.6256 20.536ZM53.6256 18.952C54.1896 18.952 54.6763 18.804 55.0856 18.508C55.495 18.212 55.8056 17.8147 56.0176 17.316C56.2296 16.8173 56.3356 16.2613 56.3356 15.648C56.3356 15.0347 56.2296 14.4787 56.0176 13.98C55.8056 13.4813 55.495 13.084 55.0856 12.788C54.6763 12.492 54.1896 12.344 53.6256 12.344C53.0616 12.344 52.575 12.492 52.1656 12.788C51.7563 13.084 51.4456 13.4813 51.2336 13.98C51.0216 14.4787 50.9156 15.0347 50.9156 15.648C50.9156 16.2613 51.0216 16.8173 51.2336 17.316C51.4456 17.8147 51.7563 18.212 52.1656 18.508C52.575 18.804 53.0616 18.952 53.6256 18.952ZM59.3221 20.368V12.032H60.8001V13.44C61.0681 12.944 61.4508 12.5533 61.9481 12.264C62.4454 11.9747 63.0068 11.8293 63.6321 11.828V13.668H63.1628C62.7534 13.668 62.3721 13.7413 62.0188 13.888C61.6654 14.0347 61.3828 14.2773 61.1708 14.616C60.9588 14.9547 60.8528 15.424 60.8528 16.024V20.368H59.3221ZM67.6297 20.536C66.791 20.536 66.047 20.3573 65.397 20C64.7617 19.6427 64.2617 19.1347 63.897 18.476C63.5324 17.8173 63.3497 17.0587 63.3497 16.2C63.3497 15.3413 63.5324 14.5853 63.897 13.932C64.2617 13.2787 64.7617 12.7707 65.397 12.408C66.047 12.0453 66.791 11.864 67.6297 11.864C68.3324 11.864 68.9577 12.0027 69.5057 12.28C70.0684 12.5573 70.5124 12.9507 70.8377 13.46V12.032H72.3157V20.368H70.8377V18.92C70.5124 19.4347 70.0657 19.836 69.497 20.124C68.9284 20.3987 68.3084 20.536 67.6297 20.536ZM67.8577 19.064C68.4004 19.064 68.871 18.9333 69.2697 18.672C69.6684 18.4107 69.975 18.052 70.1897 17.596C70.4044 17.14 70.5117 16.6107 70.5117 16.008C70.5117 15.416 70.4044 14.8947 70.1897 14.444C69.975 13.9933 69.6684 13.6373 69.2697 13.376C68.871 13.1147 68.4004 12.984 67.8577 12.984C67.3257 12.984 66.855 13.1173 66.4457 13.384C66.0364 13.6507 65.7177 14.0093 65.4897 14.46C65.2764 14.9107 65.1697 15.424 65.1697 16C65.1697 16.5867 65.2764 17.1053 65.4897 17.556C65.7177 18.0067 66.0364 18.3653 66.4457 18.632C66.855 18.92 67.3257 19.064 67.8577 19.064ZM78.8622 20.536C78.1115 20.536 77.4355 20.396 76.8342 20.116C76.2329 19.8213 75.7489 19.4227 75.3822 18.92C75.0155 18.4027 74.7955 17.8093 74.7222 17.14H76.3062C76.3795 17.6747 76.6262 18.1053 77.0462 18.432C77.4662 18.7587 78.0089 18.9227 78.6742 18.924C79.2915 18.924 79.7702 18.7907 80.1102 18.524C80.4502 18.2573 80.6202 17.9173 80.6202 17.504C80.6202 17.0693 80.4715 16.7427 80.1742 16.524C79.8915 16.3053 79.4209 16.1147 78.7622 15.952L77.9902 15.768C77.1115 15.5347 76.4462 15.208 75.9942 14.788C75.5422 14.368 75.3162 13.8213 75.3162 13.148C75.3162 12.6493 75.4569 12.2067 75.7382 11.82C76.0195 11.4333 76.4075 11.1307 76.9022 10.912C77.4115 10.6933 77.9902 10.584 78.6382 10.584C79.5702 10.584 80.3315 10.8107 80.9222 11.264C81.5275 11.7173 81.8809 12.3347 81.9822 13.116H80.4342C80.3609 12.6813 80.1395 12.336 79.7702 12.08C79.4009 11.8093 78.9275 11.6747 78.3502 11.676C77.7969 11.676 77.3609 11.8013 77.0422 12.052C76.7235 12.288 76.5642 12.6013 76.5642 12.992C76.5642 13.3493 76.6895 13.6347 76.9402 13.848C77.1909 14.0467 77.5709 14.2107 78.0802 14.34L79.1262 14.6C80.0209 14.8493 80.6915 15.1893 81.1382 15.62C81.5995 16.036 81.8302 16.5947 81.8302 17.296C81.8302 17.7787 81.6869 18.2147 81.4002 18.604C81.1135 18.9933 80.7149 19.304 80.2042 19.536C79.6935 19.7533 79.1102 19.8627 78.4422 19.864C78.2435 19.9013 78.0475 19.9253 77.8542 19.936C77.6609 19.9467 77.5035 19.952 77.3862 19.952L77.3702 19.968H77.3422L77.3142 19.984C77.8542 19.9467 78.3502 19.8627 78.8022 19.732V20.152C78.4942 20.2693 78.0902 20.3733 77.5902 20.464C77.6209 20.448 77.6635 20.4293 77.7182 20.408C77.7729 20.4013 77.8275 20.3947 77.8822 20.388C77.9369 20.3813 77.9862 20.3787 78.0302 20.38C78.0742 20.3813 78.1102 20.384 78.1422 20.388C78.1742 20.3773 78.2049 20.3707 78.2342 20.368C78.2635 20.3653 78.2902 20.364 78.3142 20.364C78.3382 20.364 78.3635 20.364 78.3902 20.364C78.4169 20.364 78.4529 20.364 78.4982 20.364C78.5435 20.3793 78.6035 20.3867 78.6742 20.388C78.7449 20.3893 78.8169 20.392 78.8902 20.396C78.9635 20.4 79.0289 20.408 79.0862 20.42H79.1022C79.1289 20.42 79.1635 20.42 79.2062 20.42C79.2489 20.42 79.2915 20.4173 79.3342 20.412C79.3769 20.4067 79.4195 20.396 79.4622 20.38C79.5049 20.364 79.5382 20.348 79.5622 20.332C79.7315 20.2707 79.9235 20.1987 80.1382 20.116V19.696C79.7395 19.9333 79.2915 20.124 78.7942 20.268C78.8249 20.2493 78.8662 20.2333 78.9182 20.22C78.9702 20.2067 79.0142 20.1973 79.0502 20.192L79.0942 20.188L79.1382 20.184C79.1822 20.1693 79.2208 20.1587 79.2542 20.152C79.2875 20.1453 79.3235 20.1387 79.3622 20.132L79.3982 20.128C79.4769 20.112 79.5462 20.096 79.6062 20.08C79.6662 20.0533 79.7315 20.028 79.8022 20.004C79.8729 19.98 79.9569 19.9493 80.0542 19.912C80.1515 19.8747 80.2755 19.832 80.4262 19.784V19.364C79.9289 19.596 79.4062 19.7587 78.8582 19.852L78.8622 20.536Z" fill="white"/>
            </svg>
          </div>
        </div>
        <div className="text-center">
          <h1 className="text-xl font-semibold mb-2">Login Required</h1>
          <p className="text-zinc-400 mb-4">Please log in to access Vyna.live features</p>
          <a 
            href={`${API_BASE_URL}/auth`} 
            target="_blank" 
            rel="noopener noreferrer"
            className="inline-block px-4 py-2 bg-[#5D1C34] text-white rounded-lg hover:bg-[#4c1629] transition-colors"
          >
            Login to Vyna.live
          </a>
        </div>
      </div>
    );
  }

  return (
    <div className="flex flex-col h-screen bg-zinc-900 text-white">
      {/* Header */}
      <div className="border-b border-zinc-800 px-3 py-2 flex items-center justify-between">
        <div className="inline-block">
          <svg width="84" height="28" viewBox="0 0 84 28" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M18.333 3.5L26.25 14L18.333 24.5L10.417 14L18.333 3.5Z" fill="#A67D44" stroke="#A67D44" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M10.417 3.5L18.333 14L10.417 24.5L2.5 14L10.417 3.5Z" fill="#5D1C34" stroke="#5D1C34" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
            <path d="M38.77 20.368V8.176H42.626C43.7993 8.176 44.7833 8.38133 45.578 8.792C46.3873 9.18667 47.0033 9.744 47.426 10.464C47.8487 11.168 48.06 11.984 48.06 12.912C48.06 13.84 47.8487 14.664 47.426 15.384C47.0033 16.088 46.3873 16.6453 45.578 17.056C44.7833 17.4667 43.7993 17.672 42.626 17.672H40.618V20.368H38.77ZM40.618 16.04H42.514C43.4513 16.04 44.1553 15.8213 44.626 15.384C45.0967 14.9467 45.332 14.3227 45.332 13.512V12.312C45.332 11.5013 45.0967 10.8773 44.626 10.44C44.1553 10.0027 43.4513 9.784 42.514 9.784H40.618V16.04ZM53.6256 20.536C52.7843 20.536 52.039 20.3547 51.3896 19.992C50.7403 19.6293 50.2323 19.1213 49.8656 18.468C49.499 17.8147 49.3176 17.0587 49.3176 16.2C49.3176 15.3413 49.499 14.5853 49.8656 13.932C50.2323 13.2787 50.7403 12.7707 51.3896 12.408C52.039 12.0453 52.7843 11.864 53.6256 11.864C54.467 11.864 55.2123 12.0453 55.8616 12.408C56.511 12.7707 57.0216 13.2787 57.3936 13.932C57.7656 14.5853 57.9516 15.3413 57.9516 16.2C57.9516 17.0587 57.7656 17.8147 57.3936 18.468C57.0216 19.1213 56.511 19.6293 55.8616 19.992C55.2123 20.3547 54.467 20.536 53.6256 20.536ZM53.6256 18.952C54.1896 18.952 54.6763 18.804 55.0856 18.508C55.495 18.212 55.8056 17.8147 56.0176 17.316C56.2296 16.8173 56.3356 16.2613 56.3356 15.648C56.3356 15.0347 56.2296 14.4787 56.0176 13.98C55.8056 13.4813 55.495 13.084 55.0856 12.788C54.6763 12.492 54.1896 12.344 53.6256 12.344C53.0616 12.344 52.575 12.492 52.1656 12.788C51.7563 13.084 51.4456 13.4813 51.2336 13.98C51.0216 14.4787 50.9156 15.0347 50.9156 15.648C50.9156 16.2613 51.0216 16.8173 51.2336 17.316C51.4456 17.8147 51.7563 18.212 52.1656 18.508C52.575 18.804 53.0616 18.952 53.6256 18.952ZM59.3221 20.368V12.032H60.8001V13.44C61.0681 12.944 61.4508 12.5533 61.9481 12.264C62.4454 11.9747 63.0068 11.8293 63.6321 11.828V13.668H63.1628C62.7534 13.668 62.3721 13.7413 62.0188 13.888C61.6654 14.0347 61.3828 14.2773 61.1708 14.616C60.9588 14.9547 60.8528 15.424 60.8528 16.024V20.368H59.3221ZM67.6297 20.536C66.791 20.536 66.047 20.3573 65.397 20C64.7617 19.6427 64.2617 19.1347 63.897 18.476C63.5324 17.8173 63.3497 17.0587 63.3497 16.2C63.3497 15.3413 63.5324 14.5853 63.897 13.932C64.2617 13.2787 64.7617 12.7707 65.397 12.408C66.047 12.0453 66.791 11.864 67.6297 11.864C68.3324 11.864 68.9577 12.0027 69.5057 12.28C70.0684 12.5573 70.5124 12.9507 70.8377 13.46V12.032H72.3157V20.368H70.8377V18.92C70.5124 19.4347 70.0657 19.836 69.497 20.124C68.9284 20.3987 68.3084 20.536 67.6297 20.536ZM67.8577 19.064C68.4004 19.064 68.871 18.9333 69.2697 18.672C69.6684 18.4107 69.975 18.052 70.1897 17.596C70.4044 17.14 70.5117 16.6107 70.5117 16.008C70.5117 15.416 70.4044 14.8947 70.1897 14.444C69.975 13.9933 69.6684 13.6373 69.2697 13.376C68.871 13.1147 68.4004 12.984 67.8577 12.984C67.3257 12.984 66.855 13.1173 66.4457 13.384C66.0364 13.6507 65.7177 14.0093 65.4897 14.46C65.2764 14.9107 65.1697 15.424 65.1697 16C65.1697 16.5867 65.2764 17.1053 65.4897 17.556C65.7177 18.0067 66.0364 18.3653 66.4457 18.632C66.855 18.92 67.3257 19.064 67.8577 19.064ZM78.8622 20.536C78.1115 20.536 77.4355 20.396 76.8342 20.116C76.2329 19.8213 75.7489 19.4227 75.3822 18.92C75.0155 18.4027 74.7955 17.8093 74.7222 17.14H76.3062C76.3795 17.6747 76.6262 18.1053 77.0462 18.432C77.4662 18.7587 78.0089 18.9227 78.6742 18.924C79.2915 18.924 79.7702 18.7907 80.1102 18.524C80.4502 18.2573 80.6202 17.9173 80.6202 17.504C80.6202 17.0693 80.4715 16.7427 80.1742 16.524C79.8915 16.3053 79.4209 16.1147 78.7622 15.952L77.9902 15.768C77.1115 15.5347 76.4462 15.208 75.9942 14.788C75.5422 14.368 75.3162 13.8213 75.3162 13.148C75.3162 12.6493 75.4569 12.2067 75.7382 11.82C76.0195 11.4333 76.4075 11.1307 76.9022 10.912C77.4115 10.6933 77.9902 10.584 78.6382 10.584C79.5702 10.584 80.3315 10.8107 80.9222 11.264C81.5275 11.7173 81.8809 12.3347 81.9822 13.116H80.4342C80.3609 12.6813 80.1395 12.336 79.7702 12.08C79.4009 11.8093 78.9275 11.6747 78.3502 11.676C77.7969 11.676 77.3609 11.8013 77.0422 12.052C76.7235 12.288 76.5642 12.6013 76.5642 12.992C76.5642 13.3493 76.6895 13.6347 76.9402 13.848C77.1909 14.0467 77.5709 14.2107 78.0802 14.34L79.1262 14.6C80.0209 14.8493 80.6915 15.1893 81.1382 15.62C81.5995 16.036 81.8302 16.5947 81.8302 17.296C81.8302 17.7787 81.6869 18.2147 81.4002 18.604C81.1135 18.9933 80.7149 19.304 80.2042 19.536C79.6935 19.7533 79.1102 19.8627 78.4422 19.864C78.2435 19.9013 78.0475 19.9253 77.8542 19.936C77.6609 19.9467 77.5035 19.952 77.3862 19.952L77.3702 19.968H77.3422L77.3142 19.984C77.8542 19.9467 78.3502 19.8627 78.8022 19.732V20.152C78.4942 20.2693 78.0902 20.3733 77.5902 20.464C77.6209 20.448 77.6635 20.4293 77.7182 20.408C77.7729 20.4013 77.8275 20.3947 77.8822 20.388C77.9369 20.3813 77.9862 20.3787 78.0302 20.38C78.0742 20.3813 78.1102 20.384 78.1422 20.388C78.1742 20.3773 78.2049 20.3707 78.2342 20.368C78.2635 20.3653 78.2902 20.364 78.3142 20.364C78.3382 20.364 78.3635 20.364 78.3902 20.364C78.4169 20.364 78.4529 20.364 78.4982 20.364C78.5435 20.3793 78.6035 20.3867 78.6742 20.388C78.7449 20.3893 78.8169 20.392 78.8902 20.396C78.9635 20.4 79.0289 20.408 79.0862 20.42H79.1022C79.1289 20.42 79.1635 20.42 79.2062 20.42C79.2489 20.42 79.2915 20.4173 79.3342 20.412C79.3769 20.4067 79.4195 20.396 79.4622 20.38C79.5049 20.364 79.5382 20.348 79.5622 20.332C79.7315 20.2707 79.9235 20.1987 80.1382 20.116V19.696C79.7395 19.9333 79.2915 20.124 78.7942 20.268C78.8249 20.2493 78.8662 20.2333 78.9182 20.22C78.9702 20.2067 79.0142 20.1973 79.0502 20.192L79.0942 20.188L79.1382 20.184C79.1822 20.1693 79.2208 20.1587 79.2542 20.152C79.2875 20.1453 79.3235 20.1387 79.3622 20.132L79.3982 20.128C79.4769 20.112 79.5462 20.096 79.6062 20.08C79.6662 20.0533 79.7315 20.028 79.8022 20.004C79.8729 19.98 79.9569 19.9493 80.0542 19.912C80.1515 19.8747 80.2755 19.832 80.4262 19.784V19.364C79.9289 19.596 79.4062 19.7587 78.8582 19.852L78.8622 20.536Z" fill="white"/>
          </svg>
        </div>
        
        <div className="flex items-center">
          {isAuthenticated && user && (
            <div className="flex items-center space-x-2 bg-zinc-800/50 px-2 py-1 rounded-sm text-sm">
              <div className="w-[22px] h-[22px] rounded-full overflow-hidden">
                <img 
                  src={user.avatarUrl || "https://randomuser.me/api/portraits/men/32.jpg"} 
                  alt={user.displayName || user.username} 
                  className="w-full h-full object-cover"
                />
              </div>
              <span className="text-white text-xs font-medium">{user.displayName || user.username}</span>
            </div>
          )}
        </div>
      </div>
      
      {/* Tabs */}
      <div className="flex border-b border-zinc-800 bg-zinc-900/95">
        <button
          onClick={() => handleTabClick("vynaai")}
          className={`flex-1 px-4 py-2 text-center text-sm font-medium ${activeTab === "vynaai" ? "text-white border-b-2 border-[#5D1C34]" : "text-zinc-400"}`}
        >
          VynaAI
        </button>
        <button
          onClick={() => handleTabClick("notepad")}
          className={`flex-1 px-4 py-2 text-center text-sm font-medium ${activeTab === "notepad" ? "text-white border-b-2 border-[#5D1C34]" : "text-zinc-400"}`}
        >
          Notepad
        </button>
      </div>
      
      {/* Content */}
      <div className="flex-1 overflow-hidden">
        {activeTab === "vynaai" ? (
          <div className="h-full">
            {/* We need to implement this using vanilla JS until we can properly import React components */}
            <div id="vynaai-container" className="h-full"></div>
          </div>
        ) : (
          <div className="h-full">
            {/* We need to implement this using vanilla JS until we can properly import React components */}
            <div id="notepad-container" className="h-full"></div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PopupApp;
