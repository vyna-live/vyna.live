app.post('/api/forgot-password', async (req: Request, res: Response) => {
    try {
      const { email } = req.body;
      
      if (!email) {
        return res.status(400).json({ error: 'Email is required' });
      }
      
      // Find the user by email
      const user = await getUserByEmail(email);
      
      if (!user) {
        // For security reasons, don't reveal that the email doesn't exist
        // We'll still return a success message to prevent email enumeration attacks
        return res.status(200).json({ message: 'If an account with that email exists, a password reset link has been sent.' });
      }
      
      // Generate a secure random token
      const token = randomBytes(32).toString('hex');
      const expiry = new Date();
      expiry.setHours(expiry.getHours() + 1); // Token valid for 1 hour
      
      // Store the token and expiry in the database
      await db.update(users)
        .set({
          resetPasswordToken: token,
          resetPasswordExpires: expiry,
          updatedAt: new Date()
        })
        .where(eq(users.id, user.id));
      
      // In a real implementation, you would send an email here with the reset link
      // For this example, we'll just log it and return the token in the response
      const resetUrl = `${req.protocol}://${req.get('host')}/reset-password?token=${token}`;
      log(`Password reset link generated: ${resetUrl}`, 'info');
      
      // TODO: Implement actual email sending in production
      // Example: await sendEmail(email, 'Password Reset', `Click here to reset your password: ${resetUrl}`);
      
      res.status(200).json({ 
        message: 'If an account with that email exists, a password reset link has been sent.',
        // In production, don't return the token in the response
        resetUrl, // Remove this in production
        token // Remove this in production
      });
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : String(error);
      log(`Forgot password error: ${errorMessage}`, 'error');
      res.status(500).json({ error: 'Failed to process password reset request' });
    }
  });