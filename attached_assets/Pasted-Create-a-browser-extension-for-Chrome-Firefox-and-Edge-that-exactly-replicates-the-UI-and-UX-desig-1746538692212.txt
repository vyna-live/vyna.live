Create a browser extension for Chrome, Firefox, and Edge that exactly replicates the UI and UX design showcased in the three provided screenshots (Login, AI Chat, and Notepad interfaces). The extension should use the existing backend functionalities, so focus on mirroring the front-end layout and interaction behavior.

🔲 Screens/Views to Implement:
Login Screen (Extension Login.png)

Dark theme background

"Vyna.Live" logo centered

Email + Password fields with subtle placeholder text

"Login" button (beige/tan color)

"or" separator line

"Sign up with Google" button

VynaAI Chat Interface (Extension AI.png)

Tab bar: VynaAI (active) and Notepad

Centered icon and text:

Icon: Sparkle/star icon (gray with subtle glow)

Text: “VynaAI — Ask questions to quickly research topics while streaming”

Input bar:

Microphone, attachment, and camera icons

Message input box

Dark gray background

Notepad Interface (Extension Notes.png)

Tab bar: VynaAI and Notepad (active)

Centered title: “Research Notes”

Subtitle: “Save important information for your stream”

Input area at bottom:

“Type a new note”

Icons for file, mic, camera

“+ Add note” button (white with rounded edges)

🎨 Design Requirements:
Font: Use system font or match the font in screenshots (modern sans-serif)

Theme: All screens are in dark mode with high contrast, beige highlights, and subtle shadows

Rounded corners on inputs and buttons

Tab switches should animate subtly

Maintain padding/margins as in images (estimate visually)

💡 Functionality:
Authentication: Use existing authentication logic (credentials + Google OAuth)

Chat + Notes Functionality: Do not reimplement — reuse the existing implemented functionality hooks and services

Tabbed Navigation: Switching between "VynaAI" and "Notepad" should toggle views without reloading state

Input Handling:

Inputs (text, mic, camera, file) should trigger existing handlers

Notes should be savable and viewable from the extension

Chat input should send to the existing AI response engine

🧩 Tech Stack:
Frontend Framework: React (preferred), or plain JS with modular CSS

Browser APIs: Use manifest v3 for Chrome compatibility

Styling: TailwindCSS or custom CSS to match exact layout and style

Assets: Use matching icons as seen in UI (HeroIcons or custom SVGs)