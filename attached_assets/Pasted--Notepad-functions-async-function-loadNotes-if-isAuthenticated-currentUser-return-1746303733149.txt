
// Notepad functions
async function loadNotes() {
  if (!isAuthenticated || !currentUser) return;

  try {
    const notepadContent = document.getElementById("notepad-content");

    // Start with a loading state
    notepadContent.innerHTML = '<div class="loading">Loading notes...</div>';

    // Fetch the notes
    const response = await fetch(
      `${API_BASE_URL}/api/notepads/${currentUser.id}`,
      {
        credentials: "include",
      }
    );

    if (response.ok) {
      const notesData = await response.json();
      savedNotes = notesData;

      // Get the notes list template and clone it
      const notesListTemplate = getTemplate("notepad-list-template"); // Using the cache to get template
      const notesListContent = document.importNode(
        notesListTemplate.content,
        true
      );

      // Clear the content area and append the template
      notepadContent.innerHTML = "";
      notepadContent.appendChild(notesListContent);

      // Populate the notes list
      const notesList = document.querySelector(".notes-list");
      if (savedNotes.length > 0) {
        savedNotes.forEach((note) => {
          const noteItem = createNoteItem(note);
          notesList.appendChild(noteItem);
        });
      } else {
        notesList.innerHTML =
          '<div class="empty-notes-message">No saved notes. Create a new note to get started.</div>';
      }

      // Add event listener to new note button
      document
        .getElementById("newNoteButton")
        .addEventListener("click", createNewNote);
    } else {
      notepadContent.innerHTML =
        '<div class="error">Failed to load notes</div>';
    }
  } catch (error) {
    console.error("Error loading notes:", error);
    document.getElementById("notepad-content").innerHTML =
      '<div class="error">Error loading notes</div>';
  }
}

function createNoteItem(note) {
  // Get the note item template and clone it
  const noteItemTemplate = getTemplate("note-item-template");
  const noteItem = document.importNode(noteItemTemplate.content, true);

  // Set note title and preview
  const titleElement = noteItem.querySelector(".note-title");
  titleElement.textContent = note.title || "Untitled Note";

  const previewElement = noteItem.querySelector(".note-preview");
  previewElement.textContent = note.content
    ? note.content.slice(0, 100) + (note.content.length > 100 ? "..." : "")
    : "Empty note";

  // Set date
  const dateElement = noteItem.querySelector(".note-date");
  dateElement.textContent = new Date(
    note.updatedAt || note.createdAt
  ).toLocaleDateString();

  // Add event listener to note item
  const noteElement = noteItem.querySelector(".note");
  noteElement.addEventListener("click", () => viewNote(note.id));

  return noteItem;
}

function createNewNote() {
  currentNoteId = null;
  showNoteEditor();
}

async function viewNote(noteId) {
  try {
    const notepadContent = document.getElementById("notepad-content");

    // Start with a loading state
    notepadContent.innerHTML = '<div class="loading">Loading note...</div>';

    // Fetch the note
    const response = await fetch(
      `${API_BASE_URL}/api/notepads/note/${noteId}`,
      {
        credentials: "include",
      }
    );

    if (response.ok) {
      const noteData = await response.json();
      currentNoteId = noteData.id;
      showNoteViewer(noteData);
    } else {
      notepadContent.innerHTML = '<div class="error">Failed to load note</div>';
    }
  } catch (error) {
    console.error("Error loading note:", error);
    document.getElementById("notepad-content").innerHTML =
      '<div class="error">Error loading note</div>';
  }
}

function showNoteEditor(existingNote = null) {
  const notepadContent = document.getElementById("notepad-content");

  // Get the note editor template and clone it
  const noteEditorTemplate = getTemplate("note-editor-template");
  const noteEditorContent = document.importNode(
    noteEditorTemplate.content,
    true
  );

  // Clear the content area and append the template
  notepadContent.innerHTML = "";
  notepadContent.appendChild(noteEditorContent);

  // Add event listeners
  document
    .getElementById("backToNotes")
    .addEventListener("click", () => loadNotes());
  document.getElementById("saveNoteButton").addEventListener("click", saveNote);
  const addLineButton = document.getElementById("addLineButton");
  addLineButton.addEventListener("click", addNoteLine);

  // Make sure add line button is always enabled
  addLineButton.disabled = false;

  const noteInput = document.getElementById("noteInput");
  const saveNoteButton = document.getElementById("saveNoteButton");
  const noteTitle = document.getElementById("noteTitle");

  // Add keydown handler
  noteInput.addEventListener("keydown", handleNoteInputKeyDown);

  // Enable/disable save button based on input
  const updateSaveButtonState = () => {
    saveNoteButton.disabled =
      noteInput.value.trim() === "" && noteTitle.value.trim() === "";
  };

  noteInput.addEventListener("input", updateSaveButtonState);
  noteTitle.addEventListener("input", updateSaveButtonState);

  // Initialize button state
  updateSaveButtonState();

  // If editing existing note, populate the fields
  if (existingNote) {
    document.getElementById("noteTitle").value = existingNote.title || "";
    document.getElementById("noteInput").value = existingNote.content || "";

    // Ensure save button is updated with the loaded content
    updateSaveButtonState();
  }

  // Focus on title if empty, otherwise on content
  if (!existingNote || !existingNote.title) {
    document.getElementById("noteTitle").focus();
  } else {
    document.getElementById("noteInput").focus();
  }
}

function showNoteViewer(note) {
  const notepadContent = document.getElementById("notepad-content");

  // Get the note viewer template and clone it
  const noteViewerTemplate = getTemplate("note-viewer-template");
  const noteViewerContent = document.importNode(
    noteViewerTemplate.content,
    true
  );

  // Clear the content area and append the template
  notepadContent.innerHTML = "";
  notepadContent.appendChild(noteViewerContent);

  // Add event listeners
  document
    .getElementById("backToNotes")
    .addEventListener("click", () => loadNotes());
  document
    .getElementById("editNoteButton")
    .addEventListener("click", () => showNoteEditor(note));

  // Populate note details
  document.getElementById("noteViewTitle").textContent =
    note.title || "Untitled Note";
  document.getElementById("noteViewContent").textContent =
    note.content || "No content";
  document.getElementById(
    "noteViewDate"
  ).textContent = `Last updated: ${new Date(
    note.updatedAt || note.createdAt
  ).toLocaleString()}`;
}

function addNoteLine() {
  try {
    const noteInput = document.getElementById("noteInput");
    if (!noteInput) {
      console.error("addNoteLine: noteInput element not found");
      return;
    }

    const currentValue = noteInput.value;
    console.log("addNoteLine: Adding new line to note input");

    // Add a proper new line with bullet point
    // If there's no content yet, don't add a leading newline
    if (currentValue.trim() === "") {
      noteInput.value = "- ";
    } else {
      // If the content doesn't end with a newline, add one
      if (!currentValue.endsWith("\n")) {
        noteInput.value = currentValue + "\n- ";
      } else {
        noteInput.value = currentValue + "- ";
      }
    }

    noteInput.focus();

    // Move cursor to the end
    noteInput.selectionStart = noteInput.selectionEnd = noteInput.value.length;

    // Manually trigger input event to update save button state
    noteInput.dispatchEvent(new Event("input"));
    console.log("addNoteLine: Line added successfully, button state updated");
  } catch (error) {
    console.error("Error in addNoteLine:", error);
    showToast("Error adding new line", true);
  }
}

async function saveNote() {
  const title = document.getElementById("noteTitle").value.trim();
  const content = document.getElementById("noteInput").value.trim();

  console.log("Attempting to save note:", {
    title,
    content,
    isAuthenticated,
    userId: currentUser?.id,
  });

  if (!title && !content) {
    showToast("Please enter a title or some content", true);
    return;
  }

  // Verify we have user credentials
  if (!isAuthenticated || !currentUser || !currentUser.id) {
    console.error("Cannot save note: User not authenticated");
    showToast("You must be logged in to save notes", true);
    return;
  }

  try {
    let response;

    if (currentNoteId) {
      // Update existing note
      response = await fetch(
        `${API_BASE_URL}/api/notepads/note/${currentNoteId}`,
        {
          method: "PUT",
          credentials: "include",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            title,
            content,
            hostId: currentUser.id, // Include hostId in updates as well
          }),
        }
      );
    } else {
      // Create new note
      response = await fetch(`${API_BASE_URL}/api/notepads`, {
        method: "POST",
        credentials: "include",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          hostId: currentUser.id,
          title: title || "Untitled Note",
          content,
        }),
      });
    }

    if (response.ok) {
      const noteData = await response.json();
      currentNoteId = noteData.id;

      console.log("Note saved successfully:", noteData);
      showToast("Note saved successfully");
      showNoteViewer(noteData);
    } else {
      // Try to get more detailed error information
      try {
        const errorData = await response.json();
        console.error("Failed to save note:", {
          status: response.status,
          error: errorData,
        });
        showToast(
          `Failed to save note: ${errorData.error || "Unknown error"}`,
          true
        );
      } catch (parseError) {
        console.error("Failed to save note (could not parse error):", {
          status: response.status,
        });
        showToast(
          `Failed to save note: Server returned ${response.status}`,
          true
        );
      }
    }
  } catch (error) {
    console.error("Error saving note:", error);
    showToast("Error saving note", true);
  }
}

function handleNoteInputKeyDown(event) {
  // Detect Ctrl+S or Cmd+S
  if ((event.ctrlKey || event.metaKey) && event.key === "s") {
    event.preventDefault();
    saveNote();
  }