 useEffect(() => {
    async function fetchStreamData() {
      try {
        if (!params?.streamId) {
          throw new Error('Host ID is missing');
        }
        
        setIsLoading(true);
        setError(null);
        
        // Check if there's a channel parameter in the URL
        const urlParams = new URLSearchParams(window.location.search);
        const channelParam = urlParams.get('channel');
        
        // The streamId param is now actually the hostId
        const hostId = params.streamId;
        console.log(`Validating host ID: ${hostId}, channel: ${channelParam || 'not specified'}`);
        
        // Fetch stream data from the host validation endpoint
        let validateUrl = `/api/livestreams/${hostId}/validate`;
        if (channelParam) {
          validateUrl += `?channel=${encodeURIComponent(channelParam)}`;
        }
        
        const validateResponse = await fetch(validateUrl);
        
        if (!validateResponse.ok) {
          const errorData = await validateResponse.json();
          throw new Error(errorData.error || 'Failed to find active stream for this host');
        }
        
        const validateData = await validateResponse.json();
        
        // Check if host has an active stream
        if (!validateData.isActive) {
          throw new Error('This host does not have an active stream at the moment. Please try again later.');
        }
        
        // Get join credentials from the active stream data
        let credentialsUrl = `/api/stream/${validateData.streamId}/join-credentials`;
        if (validateData.channelName) {
          credentialsUrl += `?channel=${encodeURIComponent(validateData.channelName)}`;
        }
        
        const credentialsResponse = await fetch(credentialsUrl);
        
        if (!credentialsResponse.ok) {
          const errorData = await credentialsResponse.json();
          throw new Error(errorData.error || 'Failed to get stream credentials');
        }
        
        const credentials = await credentialsResponse.json();
        
        // Set stream information for viewer
        setStreamInfo({
          appId: credentials.appId,
          token: credentials.token,
          channelName: credentials.channelName,
          uid: credentials.uid,
          streamTitle: validateData.streamTitle || 'Live Stream',
          hostName: validateData.hostName || 'Host',
          isActive: validateData.isActive
        });
        
        setIsLoading(false);
      } catch (error) {
        console.error('Error fetching stream data:', error);
        setError(error instanceof Error ? error.message : 'Failed to load stream');
        setIsLoading(false);
      }
    }
    
    fetchStreamData();
  }, [params]);